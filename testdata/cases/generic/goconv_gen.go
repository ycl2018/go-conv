// Code generated by github.com/ycl2018/go-conv DO NOT EDIT.
//go:build !goconv_ge
// +build !goconv_gen

package generic

import (
	"github.com/ycl2018/go-conv/testdata/a"
	"github.com/ycl2018/go-conv/testdata/b"
)

func PtrAGenericStringIntToPtrBGenericStringInt64(src *a.Generic[string, int]) (dst *b.Generic[string, int64]) {
	if src != nil {
		dst = new(b.Generic[string, int64])
		if len(src.Map) > 0 {
			dst.Map = make(map[string]int64, len(src.Map))
			for k, v := range src.Map {
				var tmpK string
				var tmpV int64
				tmpK = k
				tmpV = int64(v)
				dst.Map[tmpK] = tmpV
			}
		}
		if len(src.Slice) > 0 {
			dst.Slice = make([]int64, len(src.Slice))
			for i := 0; i < len(src.Slice); i++ {
				dst.Slice[i] = int64(src.Slice[i])
			}
		}
		for i := 0; i < 3; i++ {
			dst.Array[i] = int64(src.Array[i])
		}
		dst.K = src.K
		dst.V = int64(src.V)
	}
	return
}
func PtrAGenericStringSliceIntToPtrBGenericStringSliceInt64(src *a.Generic[string, []int]) (dst *b.Generic[string, []int64]) {
	if src != nil {
		dst = new(b.Generic[string, []int64])
		if len(src.Map) > 0 {
			dst.Map = make(map[string][]int64, len(src.Map))
			for k, v := range src.Map {
				var tmpK string
				var tmpV []int64
				tmpK = k
				if len(v) > 0 {
					tmpV = make([]int64, len(v))
					for i := 0; i < len(v); i++ {
						tmpV[i] = int64(v[i])
					}
				}
				dst.Map[tmpK] = tmpV
			}
		}
		if len(src.Slice) > 0 {
			dst.Slice = make([][]int64, len(src.Slice))
			for i := 0; i < len(src.Slice); i++ {
				if len(src.Slice[i]) > 0 {
					dst.Slice[i] = make([]int64, len(src.Slice[i]))
					for i1 := 0; i1 < len(src.Slice[i]); i1++ {
						dst.Slice[i][i1] = int64(src.Slice[i][i1])
					}
				}
			}
		}
		for i := 0; i < 3; i++ {
			if len(src.Array[i]) > 0 {
				dst.Array[i] = make([]int64, len(src.Array[i]))
				for i1 := 0; i1 < len(src.Array[i]); i1++ {
					dst.Array[i][i1] = int64(src.Array[i][i1])
				}
			}
		}
		dst.K = src.K
		if len(src.V) > 0 {
			dst.V = make([]int64, len(src.V))
			for i := 0; i < len(src.V); i++ {
				dst.V[i] = int64(src.V[i])
			}
		}
	}
	return
}
func PtrAGenericStringStringToPtrBGenericStringString(src *a.Generic[string, string]) (dst *b.Generic[string, string]) {
	dst = (*b.Generic[string, string])(src)
	return
}
func init() {
	GenToGen = PtrAGenericStringStringToPtrBGenericStringString
	GenToGenCast = PtrAGenericStringIntToPtrBGenericStringInt64
	GenToGenSlice = PtrAGenericStringSliceIntToPtrBGenericStringSliceInt64
}
