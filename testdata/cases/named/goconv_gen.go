// Code generated by github.com/ycl2018/go-conv DO NOT EDIT.
// +build !goconv_gen

package named

import (
	"github.com/ycl2018/go-conv/testdata/a"
	"github.com/ycl2018/go-conv/testdata/b"
)

func CopyPtrAArrayNPtrToPtrBArrayN(src *a.ArrayNPtr) (dst *b.ArrayN) {
	if src != nil {
		dst = new(b.ArrayN)
		if src.Name != nil {
			for i := 0; i < 6; i++ {
				dst.Name[i] = (*src.Name)[i]
			}
		}
	}
	return
}
func CopyPtrAArrayNPtrToPtrBArrayNPtr(src *a.ArrayNPtr) (dst *b.ArrayNPtr) {
	if src != nil {
		dst = new(b.ArrayNPtr)
		if src.Name != nil {
			dst.Name = new(b.NamedArray)
			for i := 0; i < 6; i++ {
				(*dst.Name)[i] = (*src.Name)[i]
			}
		}
	}
	return
}
func CopyPtrAArrayNPtrToPtrBSliceN(src *a.ArrayNPtr) (dst *b.SliceN) {
	if src != nil {
		dst = new(b.SliceN)
		if src.Name != nil {
			dst.Name = make([]string, len((*src.Name)))
			for i := 0; i < len((*src.Name)); i++ {
				dst.Name[i] = (*src.Name)[i]
			}
		}
	}
	return
}
func CopyPtrAArrayNPtrToPtrBSliceNPtr(src *a.ArrayNPtr) (dst *b.SliceNPtr) {
	if src != nil {
		dst = new(b.SliceNPtr)
		if src.Name != nil {
			dst.Name = new(b.NamedSlice)
			*dst.Name = make([]string, len((*src.Name)))
			for i := 0; i < len((*src.Name)); i++ {
				(*dst.Name)[i] = (*src.Name)[i]
			}
		}
	}
	return
}
func CopyPtrAArrayNToPtrBArrayN(src *a.ArrayN) (dst *b.ArrayN) {
	if src != nil {
		dst = new(b.ArrayN)
		for i := 0; i < 6; i++ {
			dst.Name[i] = src.Name[i]
		}
	}
	return
}
func CopyPtrAArrayNToPtrBArrayNPtr(src *a.ArrayN) (dst *b.ArrayNPtr) {
	if src != nil {
		dst = new(b.ArrayNPtr)
		dst.Name = new(b.NamedArray)
		for i := 0; i < 6; i++ {
			(*dst.Name)[i] = src.Name[i]
		}
	}
	return
}
func CopyPtrAArrayNToPtrBSliceN(src *a.ArrayN) (dst *b.SliceN) {
	if src != nil {
		dst = new(b.SliceN)
		dst.Name = make([]string, len(src.Name))
		for i := 0; i < len(src.Name); i++ {
			dst.Name[i] = src.Name[i]
		}
	}
	return
}
func CopyPtrAArrayNToPtrBSliceNPtr(src *a.ArrayN) (dst *b.SliceNPtr) {
	if src != nil {
		dst = new(b.SliceNPtr)
		dst.Name = new(b.NamedSlice)
		*dst.Name = make([]string, len(src.Name))
		for i := 0; i < len(src.Name); i++ {
			(*dst.Name)[i] = src.Name[i]
		}
	}
	return
}
func CopyPtrABasicNamedPtrToPtrBBasicNamed(src *a.BasicNamedPtr) (dst *b.BasicNamed) {
	if src != nil {
		dst = new(b.BasicNamed)
		if src.Bool != nil {
			dst.Bool = b.Bool(*src.Bool)
		}
		if src.Int != nil {
			dst.Int = b.Int(*src.Int)
		}
		if src.Int8 != nil {
			dst.Int8 = b.Int8(*src.Int8)
		}
		if src.Int16 != nil {
			dst.Int16 = b.Int16(*src.Int16)
		}
		if src.Int32 != nil {
			dst.Int32 = b.Int32(*src.Int32)
		}
		if src.Int64 != nil {
			dst.Int64 = b.Int64(*src.Int64)
		}
		if src.Uint != nil {
			dst.Uint = b.Uint(*src.Uint)
		}
		if src.Uint8 != nil {
			dst.Uint8 = b.Uint8(*src.Uint8)
		}
		if src.Uint16 != nil {
			dst.Uint16 = b.Uint16(*src.Uint16)
		}
		if src.Uint32 != nil {
			dst.Uint32 = b.Uint32(*src.Uint32)
		}
		if src.Uint64 != nil {
			dst.Uint64 = b.Uint64(*src.Uint64)
		}
		if src.Uintptr != nil {
			dst.Uintptr = b.Uintptr(*src.Uintptr)
		}
		if src.Float32 != nil {
			dst.Float32 = b.Float32(*src.Float32)
		}
		if src.Float64 != nil {
			dst.Float64 = b.Float64(*src.Float64)
		}
		if src.Complex64 != nil {
			dst.Complex64 = b.Complex64(*src.Complex64)
		}
		if src.Complex128 != nil {
			dst.Complex128 = b.Complex128(*src.Complex128)
		}
		if src.String != nil {
			dst.String = b.String(*src.String)
		}
		if src.UnsafePointer != nil {
			dst.UnsafePointer = b.UnsafePointer(*src.UnsafePointer)
		}
		if src.Byte != nil {
			dst.Byte = b.Byte(*src.Byte)
		}
		if src.Rune != nil {
			dst.Rune = b.Rune(*src.Rune)
		}
	}
	return
}
func CopyPtrABasicNamedPtrToPtrBBasicNamedPtr(src *a.BasicNamedPtr) (dst *b.BasicNamedPtr) {
	if src != nil {
		dst = new(b.BasicNamedPtr)
		if src.Bool != nil {
			dst.Bool = new(b.Bool)
			*dst.Bool = b.Bool(*src.Bool)
		}
		if src.Int != nil {
			dst.Int = new(b.Int)
			*dst.Int = b.Int(*src.Int)
		}
		if src.Int8 != nil {
			dst.Int8 = new(b.Int8)
			*dst.Int8 = b.Int8(*src.Int8)
		}
		if src.Int16 != nil {
			dst.Int16 = new(b.Int16)
			*dst.Int16 = b.Int16(*src.Int16)
		}
		if src.Int32 != nil {
			dst.Int32 = new(b.Int32)
			*dst.Int32 = b.Int32(*src.Int32)
		}
		if src.Int64 != nil {
			dst.Int64 = new(b.Int64)
			*dst.Int64 = b.Int64(*src.Int64)
		}
		if src.Uint != nil {
			dst.Uint = new(b.Uint)
			*dst.Uint = b.Uint(*src.Uint)
		}
		if src.Uint8 != nil {
			dst.Uint8 = new(b.Uint8)
			*dst.Uint8 = b.Uint8(*src.Uint8)
		}
		if src.Uint16 != nil {
			dst.Uint16 = new(b.Uint16)
			*dst.Uint16 = b.Uint16(*src.Uint16)
		}
		if src.Uint32 != nil {
			dst.Uint32 = new(b.Uint32)
			*dst.Uint32 = b.Uint32(*src.Uint32)
		}
		if src.Uint64 != nil {
			dst.Uint64 = new(b.Uint64)
			*dst.Uint64 = b.Uint64(*src.Uint64)
		}
		if src.Uintptr != nil {
			dst.Uintptr = new(b.Uintptr)
			*dst.Uintptr = b.Uintptr(*src.Uintptr)
		}
		if src.Float32 != nil {
			dst.Float32 = new(b.Float32)
			*dst.Float32 = b.Float32(*src.Float32)
		}
		if src.Float64 != nil {
			dst.Float64 = new(b.Float64)
			*dst.Float64 = b.Float64(*src.Float64)
		}
		if src.Complex64 != nil {
			dst.Complex64 = new(b.Complex64)
			*dst.Complex64 = b.Complex64(*src.Complex64)
		}
		if src.Complex128 != nil {
			dst.Complex128 = new(b.Complex128)
			*dst.Complex128 = b.Complex128(*src.Complex128)
		}
		if src.String != nil {
			dst.String = new(b.String)
			*dst.String = b.String(*src.String)
		}
		if src.UnsafePointer != nil {
			dst.UnsafePointer = new(b.UnsafePointer)
			*dst.UnsafePointer = b.UnsafePointer(*src.UnsafePointer)
		}
		if src.Byte != nil {
			dst.Byte = new(b.Byte)
			*dst.Byte = b.Byte(*src.Byte)
		}
		if src.Rune != nil {
			dst.Rune = new(b.Rune)
			*dst.Rune = b.Rune(*src.Rune)
		}
	}
	return
}
func CopyPtrABasicNamedToPtrBBasicNamed(src *a.BasicNamed) (dst *b.BasicNamed) {
	if src != nil {
		dst = new(b.BasicNamed)
		dst.Bool = b.Bool(src.Bool)
		dst.Int = b.Int(src.Int)
		dst.Int8 = b.Int8(src.Int8)
		dst.Int16 = b.Int16(src.Int16)
		dst.Int32 = b.Int32(src.Int32)
		dst.Int64 = b.Int64(src.Int64)
		dst.Uint = b.Uint(src.Uint)
		dst.Uint8 = b.Uint8(src.Uint8)
		dst.Uint16 = b.Uint16(src.Uint16)
		dst.Uint32 = b.Uint32(src.Uint32)
		dst.Uint64 = b.Uint64(src.Uint64)
		dst.Uintptr = b.Uintptr(src.Uintptr)
		dst.Float32 = b.Float32(src.Float32)
		dst.Float64 = b.Float64(src.Float64)
		dst.Complex64 = b.Complex64(src.Complex64)
		dst.Complex128 = b.Complex128(src.Complex128)
		dst.String = b.String(src.String)
		dst.UnsafePointer = b.UnsafePointer(src.UnsafePointer)
		dst.Byte = b.Byte(src.Byte)
		dst.Rune = b.Rune(src.Rune)
	}
	return
}
func CopyPtrABasicNamedToPtrBBasicNamedPtr(src *a.BasicNamed) (dst *b.BasicNamedPtr) {
	if src != nil {
		dst = new(b.BasicNamedPtr)
		dst.Bool = new(b.Bool)
		*dst.Bool = b.Bool(src.Bool)
		dst.Int = new(b.Int)
		*dst.Int = b.Int(src.Int)
		dst.Int8 = new(b.Int8)
		*dst.Int8 = b.Int8(src.Int8)
		dst.Int16 = new(b.Int16)
		*dst.Int16 = b.Int16(src.Int16)
		dst.Int32 = new(b.Int32)
		*dst.Int32 = b.Int32(src.Int32)
		dst.Int64 = new(b.Int64)
		*dst.Int64 = b.Int64(src.Int64)
		dst.Uint = new(b.Uint)
		*dst.Uint = b.Uint(src.Uint)
		dst.Uint8 = new(b.Uint8)
		*dst.Uint8 = b.Uint8(src.Uint8)
		dst.Uint16 = new(b.Uint16)
		*dst.Uint16 = b.Uint16(src.Uint16)
		dst.Uint32 = new(b.Uint32)
		*dst.Uint32 = b.Uint32(src.Uint32)
		dst.Uint64 = new(b.Uint64)
		*dst.Uint64 = b.Uint64(src.Uint64)
		dst.Uintptr = new(b.Uintptr)
		*dst.Uintptr = b.Uintptr(src.Uintptr)
		dst.Float32 = new(b.Float32)
		*dst.Float32 = b.Float32(src.Float32)
		dst.Float64 = new(b.Float64)
		*dst.Float64 = b.Float64(src.Float64)
		dst.Complex64 = new(b.Complex64)
		*dst.Complex64 = b.Complex64(src.Complex64)
		dst.Complex128 = new(b.Complex128)
		*dst.Complex128 = b.Complex128(src.Complex128)
		dst.String = new(b.String)
		*dst.String = b.String(src.String)
		dst.UnsafePointer = new(b.UnsafePointer)
		*dst.UnsafePointer = b.UnsafePointer(src.UnsafePointer)
		dst.Byte = new(b.Byte)
		*dst.Byte = b.Byte(src.Byte)
		dst.Rune = new(b.Rune)
		*dst.Rune = b.Rune(src.Rune)
	}
	return
}
func CopyPtrAMapNPtrToPtrBMapN(src *a.MapNPtr) (dst *b.MapN) {
	if src != nil {
		dst = new(b.MapN)
		if src.Name != nil {
			if len((*src.Name)) > 0 {
				dst.Name = make(map[string]string, len((*src.Name)))
				for k, v := range *src.Name {
					var tmpK string
					var tmpV string
					tmpK = k
					tmpV = v
					dst.Name[tmpK] = tmpV
				}
			}
		}
	}
	return
}
func CopyPtrAMapNPtrToPtrBMapNPtr(src *a.MapNPtr) (dst *b.MapNPtr) {
	if src != nil {
		dst = new(b.MapNPtr)
		if src.Name != nil {
			dst.Name = new(b.NamedMap)
			if len((*src.Name)) > 0 {
				*dst.Name = make(map[string]string, len((*src.Name)))
				for k, v := range *src.Name {
					var tmpK string
					var tmpV string
					tmpK = k
					tmpV = v
					(*dst.Name)[tmpK] = tmpV
				}
			}
		}
	}
	return
}
func CopyPtrAMapNToPtrBMapN(src *a.MapN) (dst *b.MapN) {
	if src != nil {
		dst = new(b.MapN)
		if len(src.Name) > 0 {
			dst.Name = make(map[string]string, len(src.Name))
			for k, v := range src.Name {
				var tmpK string
				var tmpV string
				tmpK = k
				tmpV = v
				dst.Name[tmpK] = tmpV
			}
		}
	}
	return
}
func CopyPtrAMapNToPtrBMapNPtr(src *a.MapN) (dst *b.MapNPtr) {
	if src != nil {
		dst = new(b.MapNPtr)
		dst.Name = new(b.NamedMap)
		if len(src.Name) > 0 {
			*dst.Name = make(map[string]string, len(src.Name))
			for k, v := range src.Name {
				var tmpK string
				var tmpV string
				tmpK = k
				tmpV = v
				(*dst.Name)[tmpK] = tmpV
			}
		}
	}
	return
}
func CopyPtrASliceNPtrToPtrBArrayN(src *a.SliceNPtr) (dst *b.ArrayN) {
	if src != nil {
		dst = new(b.ArrayN)
		if src.Name != nil {
			for i := 0; i < 6 && i < len((*src.Name)); i++ {
				dst.Name[i] = (*src.Name)[i]
			}
		}
	}
	return
}
func CopyPtrASliceNPtrToPtrBArrayNPtr(src *a.SliceNPtr) (dst *b.ArrayNPtr) {
	if src != nil {
		dst = new(b.ArrayNPtr)
		if src.Name != nil {
			dst.Name = new(b.NamedArray)
			for i := 0; i < 6 && i < len((*src.Name)); i++ {
				(*dst.Name)[i] = (*src.Name)[i]
			}
		}
	}
	return
}
func CopyPtrASliceNPtrToPtrBSliceN(src *a.SliceNPtr) (dst *b.SliceN) {
	if src != nil {
		dst = new(b.SliceN)
		if src.Name != nil {
			if len((*src.Name)) > 0 {
				dst.Name = make([]string, len((*src.Name)))
				for i := 0; i < len((*src.Name)); i++ {
					dst.Name[i] = (*src.Name)[i]
				}
			}
		}
	}
	return
}
func CopyPtrASliceNPtrToPtrBSliceNPtr(src *a.SliceNPtr) (dst *b.SliceNPtr) {
	if src != nil {
		dst = new(b.SliceNPtr)
		if src.Name != nil {
			dst.Name = new(b.NamedSlice)
			if len((*src.Name)) > 0 {
				*dst.Name = make([]string, len((*src.Name)))
				for i := 0; i < len((*src.Name)); i++ {
					(*dst.Name)[i] = (*src.Name)[i]
				}
			}
		}
	}
	return
}
func CopyPtrASliceNToPtrBArrayN(src *a.SliceN) (dst *b.ArrayN) {
	if src != nil {
		dst = new(b.ArrayN)
		for i := 0; i < 6 && i < len(src.Name); i++ {
			dst.Name[i] = src.Name[i]
		}
	}
	return
}
func CopyPtrASliceNToPtrBArrayNPtr(src *a.SliceN) (dst *b.ArrayNPtr) {
	if src != nil {
		dst = new(b.ArrayNPtr)
		dst.Name = new(b.NamedArray)
		for i := 0; i < 6 && i < len(src.Name); i++ {
			(*dst.Name)[i] = src.Name[i]
		}
	}
	return
}
func CopyPtrASliceNToPtrBSliceN(src *a.SliceN) (dst *b.SliceN) {
	if src != nil {
		dst = new(b.SliceN)
		if len(src.Name) > 0 {
			dst.Name = make([]string, len(src.Name))
			for i := 0; i < len(src.Name); i++ {
				dst.Name[i] = src.Name[i]
			}
		}
	}
	return
}
func CopyPtrASliceNToPtrBSliceNPtr(src *a.SliceN) (dst *b.SliceNPtr) {
	if src != nil {
		dst = new(b.SliceNPtr)
		dst.Name = new(b.NamedSlice)
		if len(src.Name) > 0 {
			*dst.Name = make([]string, len(src.Name))
			for i := 0; i < len(src.Name); i++ {
				(*dst.Name)[i] = src.Name[i]
			}
		}
	}
	return
}
func PtrAArrayNPtrToPtrBArrayN(src *a.ArrayNPtr) (dst *b.ArrayN) {
	if src != nil {
		dst = new(b.ArrayN)
		if src.Name != nil {
			dst.Name = b.NamedArray((*src.Name))
		}
	}
	return
}
func PtrAArrayNPtrToPtrBArrayNPtr(src *a.ArrayNPtr) (dst *b.ArrayNPtr) {
	if src != nil {
		dst = new(b.ArrayNPtr)
		dst.Name = (*b.NamedArray)(src.Name)
	}
	return
}
func PtrAArrayNPtrToPtrBSliceN(src *a.ArrayNPtr) (dst *b.SliceN) {
	if src != nil {
		dst = new(b.SliceN)
		if src.Name != nil {
			dst.Name = make([]string, len((*src.Name)))
			for i := 0; i < len((*src.Name)); i++ {
				dst.Name[i] = (*src.Name)[i]
			}
		}
	}
	return
}
func PtrAArrayNPtrToPtrBSliceNPtr(src *a.ArrayNPtr) (dst *b.SliceNPtr) {
	if src != nil {
		dst = new(b.SliceNPtr)
		if src.Name != nil {
			dst.Name = new(b.NamedSlice)
			*dst.Name = make([]string, len((*src.Name)))
			for i := 0; i < len((*src.Name)); i++ {
				(*dst.Name)[i] = (*src.Name)[i]
			}
		}
	}
	return
}
func PtrAArrayNToPtrBArrayN(src *a.ArrayN) (dst *b.ArrayN) {
	if src != nil {
		dst = new(b.ArrayN)
		dst.Name = b.NamedArray(src.Name)
	}
	return
}
func PtrAArrayNToPtrBArrayNPtr(src *a.ArrayN) (dst *b.ArrayNPtr) {
	if src != nil {
		dst = new(b.ArrayNPtr)
		dst.Name = new(b.NamedArray)
		*dst.Name = b.NamedArray(src.Name)
	}
	return
}
func PtrAArrayNToPtrBSliceN(src *a.ArrayN) (dst *b.SliceN) {
	if src != nil {
		dst = new(b.SliceN)
		dst.Name = make([]string, len(src.Name))
		for i := 0; i < len(src.Name); i++ {
			dst.Name[i] = src.Name[i]
		}
	}
	return
}
func PtrAArrayNToPtrBSliceNPtr(src *a.ArrayN) (dst *b.SliceNPtr) {
	if src != nil {
		dst = new(b.SliceNPtr)
		dst.Name = new(b.NamedSlice)
		*dst.Name = make([]string, len(src.Name))
		for i := 0; i < len(src.Name); i++ {
			(*dst.Name)[i] = src.Name[i]
		}
	}
	return
}
func PtrABasicNamedPtrToPtrBBasicNamed(src *a.BasicNamedPtr) (dst *b.BasicNamed) {
	if src != nil {
		dst = new(b.BasicNamed)
		if src.Bool != nil {
			dst.Bool = b.Bool(*src.Bool)
		}
		if src.Int != nil {
			dst.Int = b.Int(*src.Int)
		}
		if src.Int8 != nil {
			dst.Int8 = b.Int8(*src.Int8)
		}
		if src.Int16 != nil {
			dst.Int16 = b.Int16(*src.Int16)
		}
		if src.Int32 != nil {
			dst.Int32 = b.Int32(*src.Int32)
		}
		if src.Int64 != nil {
			dst.Int64 = b.Int64(*src.Int64)
		}
		if src.Uint != nil {
			dst.Uint = b.Uint(*src.Uint)
		}
		if src.Uint8 != nil {
			dst.Uint8 = b.Uint8(*src.Uint8)
		}
		if src.Uint16 != nil {
			dst.Uint16 = b.Uint16(*src.Uint16)
		}
		if src.Uint32 != nil {
			dst.Uint32 = b.Uint32(*src.Uint32)
		}
		if src.Uint64 != nil {
			dst.Uint64 = b.Uint64(*src.Uint64)
		}
		if src.Uintptr != nil {
			dst.Uintptr = b.Uintptr(*src.Uintptr)
		}
		if src.Float32 != nil {
			dst.Float32 = b.Float32(*src.Float32)
		}
		if src.Float64 != nil {
			dst.Float64 = b.Float64(*src.Float64)
		}
		if src.Complex64 != nil {
			dst.Complex64 = b.Complex64(*src.Complex64)
		}
		if src.Complex128 != nil {
			dst.Complex128 = b.Complex128(*src.Complex128)
		}
		if src.String != nil {
			dst.String = b.String(*src.String)
		}
		dst.UnsafePointer = b.UnsafePointer(src.UnsafePointer)
		if src.Byte != nil {
			dst.Byte = b.Byte(*src.Byte)
		}
		if src.Rune != nil {
			dst.Rune = b.Rune(*src.Rune)
		}
	}
	return
}
func PtrABasicNamedPtrToPtrBBasicNamedPtr(src *a.BasicNamedPtr) (dst *b.BasicNamedPtr) {
	if src != nil {
		dst = new(b.BasicNamedPtr)
		dst.Bool = (*b.Bool)(src.Bool)
		dst.Int = (*b.Int)(src.Int)
		dst.Int8 = (*b.Int8)(src.Int8)
		dst.Int16 = (*b.Int16)(src.Int16)
		dst.Int32 = (*b.Int32)(src.Int32)
		dst.Int64 = (*b.Int64)(src.Int64)
		dst.Uint = (*b.Uint)(src.Uint)
		dst.Uint8 = (*b.Uint8)(src.Uint8)
		dst.Uint16 = (*b.Uint16)(src.Uint16)
		dst.Uint32 = (*b.Uint32)(src.Uint32)
		dst.Uint64 = (*b.Uint64)(src.Uint64)
		dst.Uintptr = (*b.Uintptr)(src.Uintptr)
		dst.Float32 = (*b.Float32)(src.Float32)
		dst.Float64 = (*b.Float64)(src.Float64)
		dst.Complex64 = (*b.Complex64)(src.Complex64)
		dst.Complex128 = (*b.Complex128)(src.Complex128)
		dst.String = (*b.String)(src.String)
		dst.UnsafePointer = (*b.UnsafePointer)(src.UnsafePointer)
		dst.Byte = (*b.Byte)(src.Byte)
		dst.Rune = (*b.Rune)(src.Rune)
	}
	return
}
func PtrABasicNamedToPtrBBasicNamed(src *a.BasicNamed) (dst *b.BasicNamed) {
	if src != nil {
		dst = new(b.BasicNamed)
		dst.Bool = b.Bool(src.Bool)
		dst.Int = b.Int(src.Int)
		dst.Int8 = b.Int8(src.Int8)
		dst.Int16 = b.Int16(src.Int16)
		dst.Int32 = b.Int32(src.Int32)
		dst.Int64 = b.Int64(src.Int64)
		dst.Uint = b.Uint(src.Uint)
		dst.Uint8 = b.Uint8(src.Uint8)
		dst.Uint16 = b.Uint16(src.Uint16)
		dst.Uint32 = b.Uint32(src.Uint32)
		dst.Uint64 = b.Uint64(src.Uint64)
		dst.Uintptr = b.Uintptr(src.Uintptr)
		dst.Float32 = b.Float32(src.Float32)
		dst.Float64 = b.Float64(src.Float64)
		dst.Complex64 = b.Complex64(src.Complex64)
		dst.Complex128 = b.Complex128(src.Complex128)
		dst.String = b.String(src.String)
		dst.UnsafePointer = b.UnsafePointer(src.UnsafePointer)
		dst.Byte = b.Byte(src.Byte)
		dst.Rune = b.Rune(src.Rune)
	}
	return
}
func PtrABasicNamedToPtrBBasicNamedPtr(src *a.BasicNamed) (dst *b.BasicNamedPtr) {
	if src != nil {
		dst = new(b.BasicNamedPtr)
		dst.Bool = new(b.Bool)
		*dst.Bool = b.Bool(src.Bool)
		dst.Int = new(b.Int)
		*dst.Int = b.Int(src.Int)
		dst.Int8 = new(b.Int8)
		*dst.Int8 = b.Int8(src.Int8)
		dst.Int16 = new(b.Int16)
		*dst.Int16 = b.Int16(src.Int16)
		dst.Int32 = new(b.Int32)
		*dst.Int32 = b.Int32(src.Int32)
		dst.Int64 = new(b.Int64)
		*dst.Int64 = b.Int64(src.Int64)
		dst.Uint = new(b.Uint)
		*dst.Uint = b.Uint(src.Uint)
		dst.Uint8 = new(b.Uint8)
		*dst.Uint8 = b.Uint8(src.Uint8)
		dst.Uint16 = new(b.Uint16)
		*dst.Uint16 = b.Uint16(src.Uint16)
		dst.Uint32 = new(b.Uint32)
		*dst.Uint32 = b.Uint32(src.Uint32)
		dst.Uint64 = new(b.Uint64)
		*dst.Uint64 = b.Uint64(src.Uint64)
		dst.Uintptr = new(b.Uintptr)
		*dst.Uintptr = b.Uintptr(src.Uintptr)
		dst.Float32 = new(b.Float32)
		*dst.Float32 = b.Float32(src.Float32)
		dst.Float64 = new(b.Float64)
		*dst.Float64 = b.Float64(src.Float64)
		dst.Complex64 = new(b.Complex64)
		*dst.Complex64 = b.Complex64(src.Complex64)
		dst.Complex128 = new(b.Complex128)
		*dst.Complex128 = b.Complex128(src.Complex128)
		dst.String = new(b.String)
		*dst.String = b.String(src.String)
		dst.UnsafePointer = (*b.UnsafePointer)(src.UnsafePointer)
		dst.Byte = new(b.Byte)
		*dst.Byte = b.Byte(src.Byte)
		dst.Rune = new(b.Rune)
		*dst.Rune = b.Rune(src.Rune)
	}
	return
}
func PtrAMapNPtrToPtrBMapN(src *a.MapNPtr) (dst *b.MapN) {
	if src != nil {
		dst = new(b.MapN)
		if src.Name != nil {
			dst.Name = b.NamedMap((*src.Name))
		}
	}
	return
}
func PtrAMapNPtrToPtrBMapNPtr(src *a.MapNPtr) (dst *b.MapNPtr) {
	if src != nil {
		dst = new(b.MapNPtr)
		dst.Name = (*b.NamedMap)(src.Name)
	}
	return
}
func PtrAMapNToPtrBMapN(src *a.MapN) (dst *b.MapN) {
	if src != nil {
		dst = new(b.MapN)
		dst.Name = b.NamedMap(src.Name)
	}
	return
}
func PtrAMapNToPtrBMapNPtr(src *a.MapN) (dst *b.MapNPtr) {
	if src != nil {
		dst = new(b.MapNPtr)
		dst.Name = new(b.NamedMap)
		*dst.Name = b.NamedMap(src.Name)
	}
	return
}
func PtrASliceNPtrToPtrBArrayN(src *a.SliceNPtr) (dst *b.ArrayN) {
	if src != nil {
		dst = new(b.ArrayN)
		if src.Name != nil {
			dst.Name = b.NamedArray((*src.Name))
		}
	}
	return
}
func PtrASliceNPtrToPtrBArrayNPtr(src *a.SliceNPtr) (dst *b.ArrayNPtr) {
	if src != nil {
		dst = new(b.ArrayNPtr)
		if src.Name != nil {
			dst.Name = (*b.NamedArray)((*src.Name))
		}
	}
	return
}
func PtrASliceNPtrToPtrBSliceN(src *a.SliceNPtr) (dst *b.SliceN) {
	if src != nil {
		dst = new(b.SliceN)
		if src.Name != nil {
			dst.Name = b.NamedSlice((*src.Name))
		}
	}
	return
}
func PtrASliceNPtrToPtrBSliceNPtr(src *a.SliceNPtr) (dst *b.SliceNPtr) {
	if src != nil {
		dst = new(b.SliceNPtr)
		dst.Name = (*b.NamedSlice)(src.Name)
	}
	return
}
func PtrASliceNToPtrBArrayN(src *a.SliceN) (dst *b.ArrayN) {
	if src != nil {
		dst = new(b.ArrayN)
		dst.Name = b.NamedArray(src.Name)
	}
	return
}
func PtrASliceNToPtrBArrayNPtr(src *a.SliceN) (dst *b.ArrayNPtr) {
	if src != nil {
		dst = new(b.ArrayNPtr)
		dst.Name = (*b.NamedArray)(src.Name)
	}
	return
}
func PtrASliceNToPtrBSliceN(src *a.SliceN) (dst *b.SliceN) {
	if src != nil {
		dst = new(b.SliceN)
		dst.Name = b.NamedSlice(src.Name)
	}
	return
}
func PtrASliceNToPtrBSliceNPtr(src *a.SliceN) (dst *b.SliceNPtr) {
	if src != nil {
		dst = new(b.SliceNPtr)
		dst.Name = new(b.NamedSlice)
		*dst.Name = b.NamedSlice(src.Name)
	}
	return
}
func init() {
	ArrayNPtrToArrayN = PtrAArrayNPtrToPtrBArrayN
	ArrayNPtrToArrayNPtr = PtrAArrayNPtrToPtrBArrayNPtr
	ArrayNPtrToSliceN = PtrAArrayNPtrToPtrBSliceN
	ArrayNPtrToSliceNPtr = PtrAArrayNPtrToPtrBSliceNPtr
	ArrayNToArrayN = PtrAArrayNToPtrBArrayN
	ArrayNToArrayNPtr = PtrAArrayNToPtrBArrayNPtr
	ArrayNToSliceN = PtrAArrayNToPtrBSliceN
	ArrayNToSliceNPtr = PtrAArrayNToPtrBSliceNPtr
	BasicPointerToBasic = PtrABasicNamedPtrToPtrBBasicNamed
	BasicPointerToBasicPointer = PtrABasicNamedPtrToPtrBBasicNamedPtr
	BasicToBasic = PtrABasicNamedToPtrBBasicNamed
	BasicToBasicPointer = PtrABasicNamedToPtrBBasicNamedPtr
	CopyArrayNPtrToArrayN = CopyPtrAArrayNPtrToPtrBArrayN
	CopyArrayNPtrToArrayNPtr = CopyPtrAArrayNPtrToPtrBArrayNPtr
	CopyArrayNPtrToSliceN = CopyPtrAArrayNPtrToPtrBSliceN
	CopyArrayNPtrToSliceNPtr = CopyPtrAArrayNPtrToPtrBSliceNPtr
	CopyArrayNToArrayN = CopyPtrAArrayNToPtrBArrayN
	CopyArrayNToArrayNPtr = CopyPtrAArrayNToPtrBArrayNPtr
	CopyArrayNToSliceN = CopyPtrAArrayNToPtrBSliceN
	CopyArrayNToSliceNPtr = CopyPtrAArrayNToPtrBSliceNPtr
	CopyBasicPointerToBasic = CopyPtrABasicNamedPtrToPtrBBasicNamed
	CopyBasicPointerToBasicPointer = CopyPtrABasicNamedPtrToPtrBBasicNamedPtr
	CopyBasicToBasic = CopyPtrABasicNamedToPtrBBasicNamed
	CopyBasicToBasicPointer = CopyPtrABasicNamedToPtrBBasicNamedPtr
	CopyMapNPtrToMapN = CopyPtrAMapNPtrToPtrBMapN
	CopyMapNPtrToMapNPtr = CopyPtrAMapNPtrToPtrBMapNPtr
	CopyMapNToMapN = CopyPtrAMapNToPtrBMapN
	CopyMapNToMapNPtr = CopyPtrAMapNToPtrBMapNPtr
	CopySliceNPtrToArrayN = CopyPtrASliceNPtrToPtrBArrayN
	CopySliceNPtrToArrayNPtr = CopyPtrASliceNPtrToPtrBArrayNPtr
	CopySliceNPtrToSliceN = CopyPtrASliceNPtrToPtrBSliceN
	CopySliceNPtrToSliceNPtr = CopyPtrASliceNPtrToPtrBSliceNPtr
	CopySliceNToArrayN = CopyPtrASliceNToPtrBArrayN
	CopySliceNToArrayNPtr = CopyPtrASliceNToPtrBArrayNPtr
	CopySliceNToSliceN = CopyPtrASliceNToPtrBSliceN
	CopySliceNToSliceNPtr = CopyPtrASliceNToPtrBSliceNPtr
	MapNPtrToMapN = PtrAMapNPtrToPtrBMapN
	MapNPtrToMapNPtr = PtrAMapNPtrToPtrBMapNPtr
	MapNToMapN = PtrAMapNToPtrBMapN
	MapNToMapNPtr = PtrAMapNToPtrBMapNPtr
	SliceNPtrToArrayN = PtrASliceNPtrToPtrBArrayN
	SliceNPtrToArrayNPtr = PtrASliceNPtrToPtrBArrayNPtr
	SliceNPtrToSliceN = PtrASliceNPtrToPtrBSliceN
	SliceNPtrToSliceNPtr = PtrASliceNPtrToPtrBSliceNPtr
	SliceNToArrayN = PtrASliceNToPtrBArrayN
	SliceNToArrayNPtr = PtrASliceNToPtrBArrayNPtr
	SliceNToSliceN = PtrASliceNToPtrBSliceN
	SliceNToSliceNPtr = PtrASliceNToPtrBSliceNPtr
}
